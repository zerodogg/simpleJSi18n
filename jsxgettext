#!/usr/bin/perl
# jsxgettext
# Copyright (C) Eskild Hustvedt 2010
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
use strict;
use warnings;
use File::Temp qw(tempfile);
use File::Copy qw(copy);
use Fatal qw(open);
use Getopt::Long;

my %map;
my @extraI18nFunctions;

GetOptions(
	'addfunc=s' => \@extraI18nFunctions,
	'help' => sub {
		usage();
		exit(0);
	},
) or die("See --help for more information\n");

if (@ARGV <= 1)
{
	usage();
	exit(0);
}

my $outfile = shift;

if (-e $outfile)
{
	die("$outfile: exists. Remove it and try again\n");
}

foreach my $file (@ARGV)
{
	my ($out,$temp) = tempfile(CLEANUP => 1);

	if(not -e $file)
	{
		die("$file: does not exist\n");
	}

	my $in = slurp($file);
	foreach my $l (split(/\n/,$in))
	{
		my $match;
		if ($l =~ /__?\(/)
		{
			$match = 1;
			$l =~ s/^[^_]+//;
			$l =~ s/__?\s*\(/gettext\(/g;
			$l =~ s/gettextp/gettext/g;
		}
		foreach my $other (@extraI18nFunctions)
		{
			if ($l =~ /\Q$other\E\(/)
			{
				$match = 1;
				$l =~ s/^\Q$other\E/gettext/g;
				$l =~ s/([\s\(,;\[\+])\Q$other\E/$1gettext/g;
			}
		}
		if(not $match)
		{
			$l = '';
		}
		print {$out} $l."\n";
	}
	close($out);

	$map{$file} = $temp;
}

my @cmd = qw(xgettext --language Perl -o);
push(@cmd,$outfile);

foreach my $fmap (keys %map)
{
	push(@cmd,$map{$fmap});
}
system(@cmd);

if(not -e $outfile)
{
	print "Found no strings to extract\n";
	exit(0);
}

my $result = slurp($outfile);
foreach my $k (keys %map)
{
	$result =~ s/$map{$k}/$k/g;
}
open(my $output,'>',$outfile);
print {$output} $result;
close($outfile);

exit(0);

sub slurp
{
	my $f = shift;
	open(my $in,'<',$f);
	local $/;
	$/ = undef;
	my $data = <$in>;
	close($in);
	return $data;
}

sub usage
{
	print "USAGE: $0 [OPTIONS] outfile.pot infile1.js infile2.js ..\n";
	print "\nOptional options are:\n";
	PrintHelp('','--addfunc "function"','Lets you have additional functions that it will treat as a gettext function. Ie. if you wrap SimpleJSi18n in an i18n object, and use i18n.get() instead of _() or gettext(), then you can supply --addfunc "i18n.get" to make sure that jsxgettext extracts those strings.');
}

# Purpose: Print formatted --help output
# Usage: PrintHelp('-shortoption', '--longoption', 'description');
#  Description will be reformatted to fit within a normal terminal
sub PrintHelp
{
	# The short option
	my $short = shift,
	# The long option
	my $long = shift;
	# The description
	my $desc = shift;
	# The generated description that will be printed in the end
	my $GeneratedDesc;
	# The current line of the description
	my $currdesc = '';
	# The maximum length any line can be
	my $maxlen = 80;
	# The length the options take up
	my $optionlen = 20;
	# Check if the short/long are LONGER than optionlen, if so, we need
	# to do some additional magic to take up only $maxlen.
	# The +1 here is because we always add a space between them, no matter what
	if ((length($short) + length($long) + 1) > $optionlen)
	{
		$optionlen = length($short) + length($long) + 1;
	}
	# Split the description into lines
	foreach my $part (split(/ /,$desc))
	{
		if(defined $GeneratedDesc)
		{
			if ((length($currdesc) + length($part) + 1 + 20) > $maxlen)
			{
				$GeneratedDesc .= "\n";
				$currdesc = '';
			}
			else
			{
				$currdesc .= ' ';
				$GeneratedDesc .= ' ';
			}
		}
		$currdesc .= $part;
		$GeneratedDesc .= $part;
	}
	# Something went wrong
	die('Option mismatch') if not $GeneratedDesc;
	# Print it all
	foreach my $description (split(/\n/,$GeneratedDesc))
	{
		printf "%-4s %-15s %s\n", $short,$long,$description;
		# Set short and long to '' to ensure we don't print the options twice
		$short = '';$long = '';
	}
	# Succeed
	return 1;
}
