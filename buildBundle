#!/usr/bin/perl
use strict;
use warnings;
use FindBin qw($RealBin);
use JSON::Any;

my %generated;

if(not @ARGV)
{
	usage();
	exit(0);
}

my $outfile = shift;

if(not -e $RealBin.'/bundle.js')
{
	die("Failed to detect bundle.js\n");
}

my $generatedSTR = slurp($RealBin.'/bundle.js');
my %langs;

foreach my $f (@ARGV)
{
	my $lang = $f;
	$lang =~ s{.*\/}{}g;
	$lang =~ s{\..*}{}g;
	$langs{$lang} = 1;
	my $data = JSON::Any->jsonToObj(slurp($f));
	foreach my $ent (keys(%{$data}))
	{
		if(not $generated{$ent})
		{
			$generated{$ent} = {};
		}
		$generated{$ent}{$lang} = $data->{$ent};
	}
}
my $payload = 'map ='.JSON::Any->objToJson(\%generated).',';
$payload .= "langs = ".JSON::Any->objToJson(\%langs).";\n";
if(not $generatedSTR =~ s{/\*PAYLOAD\*/}{$payload})
{
	die("Failed to insert payload\n");
}

open(my $o,'>',$outfile);
print {$o} $generatedSTR;
close($o);

exit(0);

sub slurp
{
	my $f = shift;
	open(my $in,'<',$f);
	local $/;
	$/ = undef;
	my $data = <$in>;
	close($in);
	return $data;
}

sub usage
{
	print "USAGE: $0 outfile.js infile.json infile2.json ..\n";
}
